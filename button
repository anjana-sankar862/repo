import javax.swing.*;
import java.awt.*;
import java.beans.PropertyChangeEvent;
import java.time.LocalDate;
import java.time.Period;
import java.time.ZoneId;

public class PatientRegistrationView {
    public JFrame frame;
    public JTextField firstNameField, lastNameField, addressLine1Field, addressLine2Field, addressLine3Field,
            emailField, contactField, ageField, pincodeField, emergencyNameField, emergencyContactField;
    public JDateChooser dobChooser;
    public JComboBox<String> sexCombo, maritalStatusCombo, bloodGroupCombo, stateComboBox;
    public JButton registerButton, viewPatientsButton;

    public PatientRegistrationView() {
        frame = new JFrame("Hospital Information System - Patient Registration");
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.setSize(800, 800);
        frame.setLayout(new BorderLayout());

        JPanel mainPanel = new JPanel();
        mainPanel.setLayout(new GridBagLayout());
        mainPanel.setBackground(Color.WHITE); // Set background color to white
        mainPanel.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));

        GridBagConstraints gbc = new GridBagConstraints();
        gbc.insets = new Insets(5, 5, 5, 5);
        gbc.anchor = GridBagConstraints.WEST;

        // Panel for Personal Information
        JPanel personalInfoPanel = new JPanel(new GridBagLayout());
        personalInfoPanel.setBackground(Color.decode("#E3F2FD")); // Light blue background
        personalInfoPanel.setBorder(BorderFactory.createTitledBorder("Personal Information"));

        // Personal Information Fields
        firstNameField = new JTextField(15);
        lastNameField = new JTextField(15);
        dobChooser = new JDateChooser();
        dobChooser.setPreferredSize(new Dimension(170, dobChooser.getPreferredSize().height));
        ageField = new JTextField(15);
        ageField.setEditable(false);
        sexCombo = new JComboBox<>(new String[]{"Male", "Female", "Other"});
        maritalStatusCombo = new JComboBox<>(new String[]{"Single", "Married", "Divorced", "Widowed"});
        bloodGroupCombo = new JComboBox<>(new String[]{"A+", "A-", "B+", "B-", "AB+", "AB-", "O+", "O-"});

        // Add fields to Personal Information panel
        gbc.gridx = 0;
        gbc.gridy = 0;
        personalInfoPanel.add(new JLabel("First Name:"), gbc);
        gbc.gridx = 1;
        personalInfoPanel.add(firstNameField, gbc);

        gbc.gridx = 0;
        gbc.gridy = 1;
        personalInfoPanel.add(new JLabel("Last Name:"), gbc);
        gbc.gridx = 1;
        personalInfoPanel.add(lastNameField, gbc);

        gbc.gridx = 0;
        gbc.gridy = 2;
        personalInfoPanel.add(new JLabel("Date of Birth:"), gbc);
        gbc.gridx = 1;
        personalInfoPanel.add(dobChooser, gbc);

        gbc.gridx = 0;
        gbc.gridy = 3;
        personalInfoPanel.add(new JLabel("Age:"), gbc);
        gbc.gridx = 1;
        personalInfoPanel.add(ageField, gbc);

        gbc.gridx = 0;
        gbc.gridy = 4;
        personalInfoPanel.add(new JLabel("Sex:"), gbc);
        gbc.gridx = 1;
        personalInfoPanel.add(sexCombo, gbc);

        gbc.gridx = 0;
        gbc.gridy = 5;
        personalInfoPanel.add(new JLabel("Marital Status:"), gbc);
        gbc.gridx = 1;
        personalInfoPanel.add(maritalStatusCombo, gbc);

        gbc.gridx = 0;
        gbc.gridy = 6;
        personalInfoPanel.add(new JLabel("Blood Group:"), gbc);
        gbc.gridx = 1;
        personalInfoPanel.add(bloodGroupCombo, gbc);

        // Panel for Contact Information
        JPanel contactInfoPanel = new JPanel(new GridBagLayout());
        contactInfoPanel.setBackground(Color.decode("#E3F2FD")); // Light blue background
        contactInfoPanel.setBorder(BorderFactory.createTitledBorder("Contact Information"));

        addressLine1Field = new JTextField(15);
        addressLine2Field = new JTextField(15);
        addressLine3Field = new JTextField(15);
        pincodeField = new JTextField(15);
        emailField = new JTextField(15);
        contactField = new JTextField(15);

        String[] states = {"Andhra Pradesh", "Arunachal Pradesh", "Assam", "Bihar", "Chhattisgarh", "Goa", "Gujarat",
                "Haryana", "Himachal Pradesh", "Jharkhand", "Karnataka", "Kerala", "Madhya Pradesh", "Maharashtra",
                "Manipur", "Meghalaya", "Mizoram", "Nagaland", "Odisha", "Punjab", "Rajasthan", "Sikkim", "Tamil Nadu",
                "Telangana", "Tripura", "Uttar Pradesh", "Uttarakhand", "West Bengal"};
        stateComboBox = new JComboBox<>(states);

        gbc.gridx = 0;
        gbc.gridy = 0;
        contactInfoPanel.add(new JLabel("Email:"), gbc);
        gbc.gridx = 1;
        contactInfoPanel.add(emailField, gbc);

        gbc.gridx = 0;
        gbc.gridy = 1;
        contactInfoPanel.add(new JLabel("Contact Number:"), gbc);
        gbc.gridx = 1;
        contactInfoPanel.add(contactField, gbc);

        gbc.gridx = 0;
        gbc.gridy = 2;
        contactInfoPanel.add(new JLabel("Address Line 1:"), gbc);
        gbc.gridx = 1;
        contactInfoPanel.add(addressLine1Field, gbc);

        gbc.gridx = 0;
        gbc.gridy = 3;
        contactInfoPanel.add(new JLabel("Address Line 2:"), gbc);
        gbc.gridx = 1;
        contactInfoPanel.add(addressLine2Field, gbc);

        gbc.gridx = 0;
        gbc.gridy = 4;
        contactInfoPanel.add(new JLabel("Address Line 3:"), gbc);
        gbc.gridx = 1;
        contactInfoPanel.add(addressLine3Field, gbc);

        gbc.gridx = 0;
        gbc.gridy = 5;
        contactInfoPanel.add(new JLabel("Pincode:"), gbc);
        gbc.gridx = 1;
        contactInfoPanel.add(pincodeField, gbc);

        gbc.gridx = 0;
        gbc.gridy = 6;
        contactInfoPanel.add(new JLabel("State:"), gbc);
        gbc.gridx = 1;
        contactInfoPanel.add(stateComboBox, gbc);

        // Panel for Emergency Contact
        JPanel emergencyContactPanel = new JPanel(new GridBagLayout());
        emergencyContactPanel.setBackground(Color.decode("#E3F2FD")); // Light blue background
        emergencyContactPanel.setBorder(BorderFactory.createTitledBorder("Emergency Contact"));

        emergencyNameField = new JTextField(15);
        emergencyContactField = new JTextField(15);

        gbc.gridx = 0;
        gbc.gridy = 0;
        emergencyContactPanel.add(new JLabel("Name:"), gbc);
        gbc.gridx = 1;
        emergencyContactPanel.add(emergencyNameField, gbc);

        gbc.gridx = 0;
        gbc.gridy = 1;
        emergencyContactPanel.add(new JLabel("Phone Number:"), gbc);
        gbc.gridx = 1;
        emergencyContactPanel.add(emergencyContactField, gbc);

        // Buttons Panel
        JPanel bottomPanel = new JPanel(new FlowLayout());
        bottomPanel.setBackground(Color.WHITE);
        registerButton = new JButton("Register");
        viewPatientsButton = new JButton("View Patients");
        bottomPanel.add(registerButton);
        bottomPanel.add(viewPatientsButton);

        // Add panels to main panel
        gbc.gridx = 0;
        gbc.gridy = 0;
        mainPanel.add(personalInfoPanel, gbc);

        gbc.gridy = 1;
        mainPanel.add(contactInfoPanel, gbc);

        gbc.gridy = 2;
        mainPanel.add(emergencyContactPanel, gbc);

        frame.add(mainPanel, BorderLayout.CENTER);
        frame.add(bottomPanel, BorderLayout.SOUTH);

        // Automatically calculate age from Date of Birth
        dobChooser.addPropertyChangeListener(e -> {
            if ("date".equals(e.getPropertyName())) {
                LocalDate dob = dobChooser.getDate().toInstant().atZone(ZoneId.systemDefault()).toLocalDate();
                int age = Period.between(dob, LocalDate.now()).getYears();
                ageField.setText(String.valueOf(age));
            }
        });

        frame.setVisible(true);
    }

    public void resetFields() {
        firstNameField.setText("");
        lastNameField.setText("");
        dobChooser.setDate(null);
        ageField.setText("");
        sexCombo.setSelectedIndex(0);
        maritalStatusCombo.setSelectedIndex(0);
        addressLine1Field.setText("");
        addressLine2Field.setText("");
        addressLine3Field.setText("");
        pincodeField.setText("");
        stateComboBox.setSelectedIndex(0);
        emailField.setText("");
        bloodGroupCombo.setSelectedIndex(0);
        contactField.setText("");
        emergencyNameField.setText("");
        emergencyContactField.setText("");
    }

    public static void main(String[] args) {
        new PatientRegistrationView();
    }
}
class ButtonEditor extends DefaultCellEditor {
    private JButton button;
    private PatientTableView tableView;

    public ButtonEditor(JCheckBox checkBox, PatientTableView tableView) {
        super(checkBox);
        this.tableView = tableView;
        button = new JButton("Update");
        button.addActionListener(e -> {
            int row = tableView.table.getSelectedRow();
            if (row != -1) {
                int mrdID = (int) tableView.table.getValueAt(row, 0);
                Patient patientToUpdate = tableView.allPatients.stream()
                        .filter(p -> p.getMrdID() == mrdID).findFirst().orElse(null);
                if (patientToUpdate != null) {
                    new PatientUpdateView(patientToUpdate, tableView);
                }
            }
        });
    }

    public Component getTableCellEditorComponent(JTable table, Object value, boolean isSelected,
                                                 int row, int column) {
        return button;
    }
}
class ButtonRenderer extends JButton implements TableCellRenderer {
    public ButtonRenderer() {
        setText("Update");
    }

    public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected,
                                                   boolean hasFocus, int row, int column) {
        return this;
    }
}
public class PatientUpdateView extends JFrame {
    private JTextField firstNameField, lastNameField, emailField, contactField, addressField, pincodeField;
    private JComboBox<String> sexCombo, maritalStatusCombo, bloodGroupCombo, stateComboBox;
    private JDateChooser dobChooser;
    private JButton updateButton;
    private Patient patient;
    private PatientTableView tableView;

    public PatientUpdateView(Patient patient, PatientTableView tableView) {
        this.patient = patient;
        this.tableView = tableView;

        setTitle("Update Patient Details");
        setSize(600, 500);
        setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        setLayout(new GridBagLayout());

        GridBagConstraints gbc = new GridBagConstraints();
        gbc.insets = new Insets(5, 5, 5, 5);
        gbc.anchor = GridBagConstraints.WEST;

        // Initialize components
        firstNameField = new JTextField(patient.getFirstName(), 15);
        lastNameField = new JTextField(patient.getLastName(), 15);
        dobChooser = new JDateChooser();
        dobChooser.setDate(Date.from(patient.getDob().atStartOfDay(ZoneId.systemDefault()).toInstant()));

        emailField = new JTextField(patient.getEmail(), 15);
        contactField = new JTextField(String.valueOf(patient.getPhoneNumber()), 15);
        addressField = new JTextField(patient.getAddress(), 15);
        pincodeField = new JTextField(patient.getPincode(), 15);

        sexCombo = new JComboBox<>(new String[]{"Male", "Female", "Other"});
        sexCombo.setSelectedItem(patient.getSex());

        maritalStatusCombo = new JComboBox<>(new String[]{"Single", "Married", "Divorced", "Widowed"});
        maritalStatusCombo.setSelectedItem(patient.getMaritalStatus());

        bloodGroupCombo = new JComboBox<>(new String[]{"A+", "A-", "B+", "B-", "AB+", "AB-", "O+", "O-"});
        bloodGroupCombo.setSelectedItem(patient.getBloodGroup());

        stateComboBox = new JComboBox<>(new String[]{"Andhra Pradesh", "Arunachal Pradesh", /* other states */});
        stateComboBox.setSelectedItem(patient.getState());

        updateButton = new JButton("Update");

        // Layout
        gbc.gridx = 0;
        gbc.gridy = 0;
        add(new JLabel("First Name:"), gbc);
        gbc.gridx = 1;
        add(firstNameField, gbc);

        gbc.gridx = 0;
        gbc.gridy = 1;
        add(new JLabel("Last Name:"), gbc);
        gbc.gridx = 1;
        add(lastNameField, gbc);

        gbc.gridx = 0;
        gbc.gridy = 2;
        add(new JLabel("DOB:"), gbc);
        gbc.gridx = 1;
        add(dobChooser, gbc);

        gbc.gridx = 0;
        gbc.gridy = 3;
        add(new JLabel("Email:"), gbc);
        gbc.gridx = 1;
        add(emailField, gbc);

        gbc.gridx = 0;
        gbc.gridy = 4;
        add(new JLabel("Contact:"), gbc);
        gbc.gridx = 1;
        add(contactField, gbc);

        gbc.gridx = 0;
        gbc.gridy = 5;
        add(new JLabel("Address:"), gbc);
        gbc.gridx = 1;
        add(addressField, gbc);

        gbc.gridx = 0;
        gbc.gridy = 6;
        add(new JLabel("Pincode:"), gbc);
        gbc.gridx = 1;
        add(pincodeField, gbc);

        gbc.gridx = 0;
        gbc.gridy = 7;
        add(new JLabel("State:"), gbc);
        gbc.gridx = 1;
        add(stateComboBox, gbc);

        gbc.gridx = 0;
        gbc.gridy = 8;
        add(new JLabel("Sex:"), gbc);
        gbc.gridx = 1;
        add(sexCombo, gbc);

        gbc.gridx = 0;
        gbc.gridy = 9;
        add(new JLabel("Marital Status:"), gbc);
        gbc.gridx = 1;
        add(maritalStatusCombo, gbc);

        gbc.gridx = 0;
        gbc.gridy = 10;
        add(new JLabel("Blood Group:"), gbc);
        gbc.gridx = 1;
        add(bloodGroupCombo, gbc);

        gbc.gridx = 1;
        gbc.gridy = 11;
        add(updateButton, gbc);

        // Update Button Action
        updateButton.addActionListener(e -> {
            try {
                patient.setFirstName(firstNameField.getText());
                patient.setLastName(lastNameField.getText());
                patient.setDob(dobChooser.getDate().toInstant().atZone(ZoneId.systemDefault()).toLocalDate());
                patient.setEmail(emailField.getText());
                patient.setPhoneNumber(Long.parseLong(contactField.getText()));
                patient.setAddress(addressField.getText());
                patient.setPincode(pincodeField.getText());
                patient.setState((String) stateComboBox.getSelectedItem());
                patient.setSex((String) sexCombo.getSelectedItem());
                patient.setMaritalStatus((String) maritalStatusCombo.getSelectedItem());
                patient.setBloodGroup((String) bloodGroupCombo.getSelectedItem());

                // Update in JSON and refresh table
                JsonHandler jsonHandler = new JsonHandler();
                jsonHandler.updatePatient(patient);
                tableView.updateTable(jsonHandler.readPatients());

                JOptionPane.showMessageDialog(this, "Patient details updated successfully!");
                dispose();
            } catch (Exception ex) {
                JOptionPane.showMessageDialog(this, "Error: " + ex.getMessage());
            }
        });

        setVisible(true);
    }
}


import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;

public class WelcomePage {

    public static void main(String[] args) {
        SwingUtilities.invokeLater(() -> {
            JFrame frame = new JFrame("Hospital Information System");
            frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
            frame.setSize(800, 600);
            frame.setLocationRelativeTo(null); // Center the window

            // Create a panel for the welcome screen content
            JPanel panel = new JPanel();
            panel.setLayout(new BorderLayout());

            // Create and add a hospital-related image
            JLabel imageLabel = new JLabel(new ImageIcon("hospital_image.jpg")); // Use your hospital image here
            panel.add(imageLabel, BorderLayout.CENTER);

            // Create a menu bar
            JMenuBar menuBar = new JMenuBar();

            // Create the "Registration" menu
            JMenu registrationMenu = new JMenu("Registration");

            JMenuItem patientRegistration = new JMenuItem("Patient Registration");
            patientRegistration.addActionListener(new ActionListener() {
                @Override
                public void actionPerformed(ActionEvent e) {
                    JOptionPane.showMessageDialog(frame, "Patient Registration clicked.");
                    // Here you can add the actual registration functionality
                }
            });
            registrationMenu.add(patientRegistration);

            JMenuItem doctorRegistration = new JMenuItem("Doctor Registration");
            doctorRegistration.addActionListener(new ActionListener() {
                @Override
                public void actionPerformed(ActionEvent e) {
                    JOptionPane.showMessageDialog(frame, "Doctor Registration clicked.");
                    // Here you can add the actual registration functionality
                }
            });
            registrationMenu.add(doctorRegistration);

            // Create the "Appointments" menu
            JMenu appointmentsMenu = new JMenu("Appointments");

            JMenuItem createAppointment = new JMenuItem("Create Appointment");
            createAppointment.addActionListener(new ActionListener() {
                @Override
                public void actionPerformed(ActionEvent e) {
                    JOptionPane.showMessageDialog(frame, "Create Appointment clicked.");
                    // Add create appointment functionality here
                }
            });
            appointmentsMenu.add(createAppointment);

            JMenuItem rescheduleAppointment = new JMenuItem("Reschedule Appointment");
            rescheduleAppointment.addActionListener(new ActionListener() {
                @Override
                public void actionPerformed(ActionEvent e) {
                    JOptionPane.showMessageDialog(frame, "Reschedule Appointment clicked.");
                    // Add reschedule appointment functionality here
                }
            });
            appointmentsMenu.add(rescheduleAppointment);

            // Create the "Browser" menu
            JMenu browserMenu = new JMenu("Browser");

            JMenuItem searchPatient = new JMenuItem("Search Patient");
            searchPatient.addActionListener(new ActionListener() {
                @Override
                public void actionPerformed(ActionEvent e) {
                    JOptionPane.showMessageDialog(frame, "Search Patient clicked.");
                    // Add search patient functionality here
                }
            });
            browserMenu.add(searchPatient);

            JMenuItem searchDoctor = new JMenuItem("Search Doctor");
            searchDoctor.addActionListener(new ActionListener() {
                @Override
                public void actionPerformed(ActionEvent e) {
                    JOptionPane.showMessageDialog(frame, "Search Doctor clicked.");
                    // Add search doctor functionality here
                }
            });
            browserMenu.add(searchDoctor);

            // Add the menus to the menu bar
            menuBar.add(registrationMenu);
            menuBar.add(appointmentsMenu);
            menuBar.add(browserMenu);

            // Set the menu bar for the frame
            frame.setJMenuBar(menuBar);

            // Add the main panel to the frame
            frame.add(panel);

            // Make the frame visible
            frame.setVisible(true);
        });
    }
}
public class PatientRegistrationView {
    public JFrame frame;
    public JTextField firstNameField, lastNameField, addressLine1Field, addressLine2Field, addressLine3Field, 
            emailField, contactField, ageField, pincodeField, stateField;
    public JDateChooser dobChooser;
    public JComboBox<String> sexCombo, maritalStatusCombo, bloodGroupCombo,stateComboBox;
    public JButton registerButton, viewPatientsButton;

    public PatientRegistrationView() {
        frame = new JFrame("Hospital Information System - Patient Registration");
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.setSize(800, 700);
        frame.setLayout(new BorderLayout());

        JPanel mainPanel = new JPanel();
        mainPanel.setLayout(new GridBagLayout());
        GridBagConstraints gbc = new GridBagConstraints();
        mainPanel.setBorder(BorderFactory.createTitledBorder("Register a New Patient"));
       // mainPanel.setBackground(Color.decode("#E3F2FD"));
         JsonHandler.readPatients();

        
        firstNameField = new JTextField(15);
        lastNameField = new JTextField(15);
        dobChooser = new JDateChooser();
        dobChooser.setPreferredSize(new Dimension(170, dobChooser.getPreferredSize().height));
        ageField = new JTextField(15);
        ageField.setEditable(false);

        addressLine1Field = new JTextField(15);
        addressLine2Field = new JTextField(15);
        addressLine3Field = new JTextField(15);
        pincodeField = new JTextField(15);
        
       
        

        emailField = new JTextField(15);
        contactField = new JTextField(15);

        sexCombo = new JComboBox<>(new String[]{"Male", "Female", "Other"});
        sexCombo.setPreferredSize(new Dimension(170,30));
        maritalStatusCombo = new JComboBox<>(new String[]{"Single", "Married", "Divorced", "Widowed"});
        maritalStatusCombo.setPreferredSize(new Dimension(170,30));
        bloodGroupCombo = new JComboBox<>(new String[]{"A+", "A-", "B+", "B-", "AB+", "AB-", "O+", "O-"});
        bloodGroupCombo.setPreferredSize(new Dimension(170, 30));
        String[]states= {"Andhra Pradesh","Arunachal Pradesh","Assam","Bihar","Chhattisgarh","Goa","Gujarat","Haryana","Himachal Pradesh","Jharkhand","Karnataka","Kerala","Madhya Pradesh","Maharashtra","Manipur","Meghalaya","Mizoram","Nagaland","Odisha","Punjab","Rajasthan","Sikkim","Tamil Nadu","Telangana","Tripura","Uttar Pradesh","Uttarakhand","West Bengal"};
        stateComboBox=new JComboBox<>(states);
        stateComboBox.setPreferredSize(new Dimension(170,30));
        
        

        registerButton = new JButton("Register");
        viewPatientsButton = new JButton("View Patients");
        
        //registerButton.setBackground(Color.decode("#FFFFFF"));
       // frame.getContentPane().setBackground(Color.decode("#F0F7F4"));
       // registerButton.setForeground(Color.decode("#1A237E"));
        //viewPatientsButton.setForeground(Color.decode("#424242"));

        
        gbc.insets = new Insets(5, 5, 5, 5); 
        gbc.anchor = GridBagConstraints.WEST;

        // First Name
        gbc.gridx = 0;
        gbc.gridy = 0;
        mainPanel.add(new JLabel("First Name:"), gbc);
        gbc.gridx = 1;
        mainPanel.add(firstNameField, gbc);

        // Last Name
        gbc.gridx = 0;
        gbc.gridy = 1;
        mainPanel.add(new JLabel("Last Name:"), gbc);
        gbc.gridx = 1;
        mainPanel.add(lastNameField, gbc);

        // Date of Birth
        gbc.gridx = 0;
        gbc.gridy = 2;
        mainPanel.add(new JLabel("Date of Birth:"), gbc);
        gbc.gridx = 1;
        mainPanel.add(dobChooser, gbc);

        // Age
        gbc.gridx = 0;
        gbc.gridy = 3;
        mainPanel.add(new JLabel("Age:"), gbc);
        gbc.gridx = 1;
        mainPanel.add(ageField, gbc);

        // Sex
        gbc.gridx = 0;
        gbc.gridy = 4;
        mainPanel.add(new JLabel("Sex:"), gbc);
        gbc.gridx = 1;
        mainPanel.add(sexCombo, gbc);

        // Marital Status
        gbc.gridx = 0;
        gbc.gridy = 5;
        mainPanel.add(new JLabel("Marital Status:"), gbc);
        gbc.gridx = 1;
        mainPanel.add(maritalStatusCombo, gbc);

        //bloodgroup
        gbc.gridx = 0;
        gbc.gridy = 6;
        mainPanel.add(new JLabel("Blood Group:"), gbc);
        gbc.gridx = 1;
        mainPanel.add(bloodGroupCombo, gbc);
        
        

        //email
        gbc.gridx = 0;
        gbc.gridy = 7;
        mainPanel.add(new JLabel("Email:"), gbc);
        gbc.gridx = 1;
        mainPanel.add(emailField, gbc);

        //Contact  num
        gbc.gridx = 0;
        gbc.gridy = 8;
        mainPanel.add(new JLabel("Contact number:"), gbc);
        gbc.gridx = 1;
        mainPanel.add(contactField, gbc);

        // address line 1
        gbc.gridx = 0;
        gbc.gridy = 9;
        mainPanel.add(new JLabel("AddressLine 1:"), gbc);
        gbc.gridx = 1;
        mainPanel.add(addressLine1Field, gbc);

        // addressline2
        gbc.gridx = 0;
        gbc.gridy = 10;
        mainPanel.add(new JLabel("AddressLine 2"), gbc);
        gbc.gridx = 1;
        mainPanel.add(addressLine2Field, gbc);

        // addressline3 ;
        gbc.gridx=0;
        gbc.gridy = 11;
        mainPanel.add(new JLabel("AddressLine 3"), gbc);
        gbc.gridx = 1;
        mainPanel.add(addressLine3Field, gbc);

        // pincode
        gbc.gridx = 0;
        gbc.gridy = 12;
        mainPanel.add(new JLabel("PinCode:"), gbc);
        gbc.gridx = 1;
        mainPanel.add(pincodeField, gbc);

        // state
        gbc.gridx = 0;
        gbc.gridy = 13;
        mainPanel.add(new JLabel("State:"), gbc);
        gbc.gridx = 1;
        mainPanel.add(stateComboBox, gbc);

        // Blood Group
//        gbc.gridx = 0;
//        gbc.gridy = 14;
//        mainPanel.add(new JLabel("Blood Group:"), gbc);
//        gbc.gridx = 1;
//        mainPanel.add(bloodGroupCombo, gbc);
//
        
        JPanel bottomPanel = new JPanel(new FlowLayout());
        bottomPanel.add(registerButton);
        bottomPanel.add(viewPatientsButton);

        
        frame.add(mainPanel, BorderLayout.CENTER);
        frame.add(bottomPanel, BorderLayout.SOUTH);

        
        dobChooser.addPropertyChangeListener(e -> {
            if ("date".equals(e.getPropertyName())) {
                LocalDate dob = dobChooser.getDate().toInstant().atZone(ZoneId.systemDefault()).toLocalDate();
                int age = Period.between(dob, LocalDate.now()).getYears();
                ageField.setText(String.valueOf(age));
            }
        });

        frame.setVisible(true);
    }
    public void resetFields() {
        firstNameField.setText(""); 
        lastNameField.setText("");  
        dobChooser.setDate(new Date());   
        ageField.setText("");       
        sexCombo.setSelectedIndex(0); 
        maritalStatusCombo.setSelectedIndex(0);
        addressLine1Field.setText("");
        addressLine2Field.setText(""); 
        addressLine3Field.setText(""); 
        pincodeField.setText("");      
        stateComboBox.setSelectedIndex(0);            
        emailField.setText("");        
        bloodGroupCombo.setSelectedIndex(0); 
        contactField.setText("");      
    }
}
