 to white
        mainPanel.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));

        GridBagConstraints gbc = new GridBagConstraints();
        gbc.insets = new Insets(5, 5, 5, 5);
        gbc.anchor = GridBagConstraints.WEST;

        // Panel for Personal Information
        JPanel personalInfoPanel = new JPanel(new GridBagLayout());
        personalInfoPanel.setBackground(Color.decode("#E3F2FD")); // Light blue background
        personalInfoPanel.setBorder(BorderFactory.createTitledBorder("Personal Information"));

        // Personal Information Fields
        firstNameField = new JTextField(15);
        lastNameField = new JTextField(15);
        dobChooser = new JDateChooser();
        dobChooser.setPreferredSize(new Dimension(170, dobChooser.getPreferredSize().height));
        ageField = new JTextField(15);
        ageField.setEditable(false);
        sexCombo = new JComboBox<>(new String[]{"Male", "Female", "Other"});
        maritalStatusCombo = new JComboBox<>(new String[]{"Single", "Married", "Divorced", "Widowed"});
        bloodGroupCombo = new JComboBox<>(new String[]{"A+", "A-", "B+", "B-", "AB+", "AB-", "O+", "O-"});

        // Add fields to Personal Information panel
        gbc.gridx = 0;
        gbc.gridy = 0;
        personalInfoPanel.add(new JLabel("First Name:"), gbc);
        gbc.gridx = 1;
        personalInfoPanel.add(firstNameField, gbc);

        gbc.gridx = 0;
        gbc.gridy = 1;
        personalInfoPanel.add(new JLabel("Last Name:"), gbc);
        gbc.gridx = 1;
        personalInfoPanel.add(lastNameField, gbc);

        gbc.gridx = 0;
        gbc.gridy = 2;
        personalInfoPanel.add(new JLabel("Date of Birth:"), gbc);
        gbc.gridx = 1;
        personalInfoPanel.add(dobChooser, gbc);

        gbc.gridx = 0;
        gbc.gridy = 3;
        personalInfoPanel.add(new JLabel("Age:"), gbc);
        gbc.gridx = 1;
        personalInfoPanel.add(ageField, gbc);

        gbc.gridx = 0;
        gbc.gridy = 4;
        personalInfoPanel.add(new JLabel("Sex:"), gbc);
        gbc.gridx = 1;
        personalInfoPanel.add(sexCombo, gbc);

        gbc.gridx = 0;
        gbc.gridy = 5;
        personalInfoPanel.add(new JLabel("Marital Status:"), gbc);
        gbc.gridx = 1;
        personalInfoPanel.add(maritalStatusCombo, gbc);

        gbc.gridx = 0;
        gbc.gridy = 6;
        personalInfoPanel.add(new JLabel("Blood Group:"), gbc);
        gbc.gridx = 1;
        personalInfoPanel.add(bloodGroupCombo, gbc);

        // Panel for Contact Information
        JPanel contactInfoPanel = new JPanel(new GridBagLayout());
        contactInfoPanel.setBackground(Color.decode("#E3F2FD")); // Light blue background
        contactInfoPanel.setBorder(BorderFactory.createTitledBorder("Contact Information"));

        addressLine1Field = new JTextField(15);
        addressLine2Field = new JTextField(15);
        addressLine3Field = new JTextField(15);
        pincodeField = new JTextField(15);
        emailField = new JTextField(15);
        contactField = new JTextField(15);

        String[] states = {"Andhra Pradesh", "Arunachal Pradesh", "Assam", "Bihar", "Chhattisgarh", "Goa", "Gujarat",
                "Haryana", "Himachal Pradesh", "Jharkhand", "Karnataka", "Kerala", "Madhya Pradesh", "Maharashtra",
                "Manipur", "Meghalaya", "Mizoram", "Nagaland", "Odisha", "Punjab", "Rajasthan", "Sikkim", "Tamil Nadu",
                "Telangana", "Tripura", "Uttar Pradesh", "Uttarakhand", "West Bengal"};
        stateComboBox = new JComboBox<>(states);

        gbc.gridx = 0;
        gbc.gridy = 0;
        contactInfoPanel.add(new JLabel("Email:"), gbc);
        gbc.gridx = 1;
        contactInfoPanel.add(emailField, gbc);

        gbc.gridx = 0;
        gbc.gridy = 1;
        contactInfoPanel.add(new JLabel("Contact Number:"), gbc);
        gbc.gridx = 1;
        contactInfoPanel.add(contactField, gbc);

        gbc.gridx = 0;
        gbc.gridy = 2;
        contactInfoPanel.add(new JLabel("Address Line 1:"), gbc);
        gbc.gridx = 1;
        contactInfoPanel.add(addressLine1Field, gbc);

        gbc.gridx = 0;
        gbc.gridy = 3;
        contactInfoPanel.add(new JLabel("Address Line 2:"), gbc);
        gbc.gridx = 1;
        contactInfoPanel.add(addressLine2Field, gbc);

        gbc.gridx = 0;
        gbc.gridy = 4;
        contactInfoPanel.add(new JLabel("Address Line 3:"), gbc);
        gbc.gridx = 1;
        contactInfoPanel.add(addressLine3Field, gbc);

        gbc.gridx = 0;
        gbc.gridy = 5;
        contactInfoPanel.add(new JLabel("Pincode:"), gbc);
        gbc.gridx = 1;
        contactInfoPanel.add(pincodeField, gbc);

        gbc.gridx = 0;
        gbc.gridy = 6;
        contactInfoPanel.add(new JLabel("State:"), gbc);
        gbc.gridx = 1;
        contactInfoPanel.add(stateComboBox, gbc);

        // Panel for Emergency Contact
        JPanel emergencyContactPanel = new JPanel(new GridBagLayout());
        emergencyContactPanel.setBackground(Color.decode("#E3F2FD")); // Light blue background
        emergencyContactPanel.setBorder(BorderFactory.createTitledBorder("Emergency Contact"));

        emergencyNameField = new JTextField(15);
        emergencyContactField = new JTextField(15);

        gbc.gridx = 0;
        gbc.gridy = 0;
        emergencyContactPanel.add(new JLabel("Name:"), gbc);
        gbc.gridx = 1;
        emergencyContactPanel.add(emergencyNameField, gbc);

        gbc.gridx = 0;
        gbc.gridy = 1;
        emergencyContactPanel.add(new JLabel("Phone Number:"), gbc);
        gbc.gridx = 1;
        emergencyContactPanel.add(emergencyContactField, gbc);

        // Buttons Panel
        JPanel bottomPanel = new JPanel(new FlowLayout());
        bottomPanel.setBackground(Color.WHITE);
        registerButton = new JButton("Register");
        viewPatientsButton = new JButton("View Patients");
        bottomPanel.add(registerButton);
        bottomPanel.add(viewPatientsButton);

        // Add panels to main panel
        gbc.gridx = 0;
        gbc.gridy = 0;
        mainPanel.add(personalInfoPanel, gbc);

        gbc.gridy = 1;
        mainPanel.add(contactInfoPanel, gbc);

        gbc.gridy = 2;
        mainPanel.add(emergencyContactPanel, gbc);

        frame.add(mainPanel, BorderLayout.CENTER);
        frame.add(bottomPanel, BorderLayout.SOUTH);

        // Automatically calculate age from Date of Birth
        dobChooser.addPropertyChangeListener(e -> {
            if ("date".equals(e.getPropertyName())) {
                LocalDate dob = dobChooser.getDate().toInstant().atZone(ZoneId.systemDefault()).toLocalDate();
                int age = Period.between(dob, LocalDate.now()).getYears();
                ageField.setText(String.valueOf(age));
            }
        });

        frame.setVisible(true);
    }

    public void resetFields() {
        firstNameField.setText("");
        lastNameField.setText("");
        dobChooser.setDate(null);
        ageField.setText("");
        sexCombo.setSelectedIndex(0);
        maritalStatusCombo.setSelectedIndex(0);
        addressLine1Field.setText("");
        addressLine2Field.setText("");
        addressLine3Field.setText("");
        pincodeField.setText("");
        stateComboBox.setSelectedIndex(0);
        emailField.setText("");
        bloodGroupCombo.setSelectedIndex(0);
        contactField.setText("");
        emergencyNameField.setText("");
        emergencyContactField.setText("");
    }

    public static void main(String[] args) {
        new PatientRegistrationView();
    }
}
class ButtonEditor extends DefaultCellEditor {
    private JButton button;
    private PatientTableView tableView;

    public ButtonEditor(JCheckBox checkBox, PatientTableView tableView) {
        super(checkBox);
        this.tableView = tableView;
        button = new JButton("Update");
        button.addActionListener(e -> {
            int row = tableView.table.getSelectedRow();
            if (row != -1) {
                int mrdID = (int) tableView.table.getValueAt(row, 0);
                Patient patientToUpdate = tableView.allPatients.stream()
                        .filter(p -> p.getMrdID() == mrdID).findFirst().orElse(null);
                if (patientToUpdate != null) {
                    new PatientUpdateView(patientToUpdate, tableView);
                }
            }
        });
    }

    public Component getTableCellEditorComponent(JTable table, Object value, boolean isSelected,
                                                 int row, int column) {
        return button;
    }
}
class ButtonRenderer extends JButton implements TableCellRenderer {
    public ButtonRenderer() {
        setText("Update");
    }

    public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected,
                                                   boolean hasFocus, int row, int column) {
        return this;
    }
}
public class PatientUpdateView extends JFrame {
    private JTextField firstNameField, lastNameField, emailField, contactField, addressField, pincodeField;
    private JComboBox<String> sexCombo, maritalStatusCombo, bloodGroupCombo, stateComboBox;
    private JDateChooser dobChooser;
    private JButton updateButton;
    private Patient patient;
    private PatientTableView tableView;

    public PatientUpdateView(Patient patient, PatientTableView tableView) {
        this.patient = patient;
        this.tableView = tableView;

        setTitle("Update Patient Details");
        setSize(600, 500);
        setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        setLayout(new GridBagLayout());

        GridBagConstraints gbc = new GridBagConstraints();
        gbc.insets = new Insets(5, 5, 5, 5);
        gbc.anchor = GridBagConstraints.WEST;

        // Initialize components
        firstNameField = new JTextField(patient.getFirstName(), 15);
        lastNameField = new JTextField(patient.getLastName(), 15);
        dobChooser = new JDateChooser();
        dobChooser.setDate(Date.from(patient.getDob().atStartOfDay(ZoneId.systemDefault()).toInstant()));

        emailField = new JTextField(patient.getEmail(), 15);
        contactField = new JTextField(String.valueOf(patient.getPhoneNumber()), 15);
        addressField = new JTextField(patient.getAddress(), 15);
        pincodeField = new JTextField(patient.getPincode(), 15);

        sexCombo = new JComboBox<>(new String[]{"Male", "Female", "Other"});
        sexCombo.setSelectedItem(patient.getSex());

        maritalStatusCombo = new JComboBox<>(new String[]{"Single", "Married", "Divorced", "Widowed"});
        maritalStatusCombo.setSelectedItem(patient.getMaritalStatus());

        bloodGroupCombo = new JComboBox<>(new String[]{"A+", "A-", "B+", "B-", "AB+", "AB-", "O+", "O-"});
        bloodGroupCombo.setSelectedItem(patient.getBloodGroup());

        stateComboBox = new JComboBox<>(new String[]{"Andhra Pradesh", "Arunachal Pradesh", /* other states */});
        stateComboBox.setSelectedItem(patient.getState());

        updateButton = new JButton("Update");

        // Layout
        gbc.gridx = 0;
        gbc.gridy = 0;
        add(new JLabel("First Name:"), gbc);
        gbc.gridx = 1;
        add(firstNameField, gbc);

        gbc.gridx = 0;
        gbc.gridy = 1;
        add(new JLabel("Last Name:"), gbc);
        gbc.gridx = 1;
        add(lastNameField, gbc);

        gbc.gridx = 0;
        gbc.gridy = 2;
        add(new JLabel("DOB:"), gbc);
        gbc.gridx = 1;
        add(dobChooser, gbc);

        gbc.gridx = 0;
        gbc.gridy = 3;
        add(new JLabel("Email:"), gbc);
        gbc.gridx = 1;
        add(emailField, gbc);

        gbc.gridx = 0;
        gbc.gridy = 4;
        add(new JLabel("Contact:"), gbc);
        gbc.gridx = 1;
        add(contactField, gbc);

        gbc.gridx = 0;
        gbc.gridy = 5;
        add(new JLabel("Address:"), gbc);
        gbc.gridx = 1;
        add(addressField, gbc);

        gbc.gridx = 0;
        gbc.gridy = 6;
        add(new JLabel("Pincode:"), gbc);
        gbc.gridx = 1;
        add(pincodeField, gbc);

        gbc.gridx = 0;
        gbc.gridy = 7;
        add(new JLabel("State:"), gbc);
        gbc.gridx = 1;
        add(stateComboBox, gbc);

        gbc.gridx = 0;
        gbc.gridy = 8;
        add(new JLabel("Sex:"), gbc);
        gbc.gridx = 1;
        add(sexCombo, gbc);

        gbc.gridx = 0;
        gbc.gridy = 9;
        add(new JLabel("Marital Status:"), gbc);
        gbc.gridx = 1;
        add(maritalStatusCombo, gbc);

        gbc.gridx = 0;
        gbc.gridy = 10;
        add(new JLabel("Blood Group:"), gbc);
        gbc.gridx = 1;
        add(bloodGroupCombo, gbc);

        gbc.gridx = 1;
        gbc.gridy = 11;
        add(updateButton, gbc);

        // Update Button Action
        updateButton.addActionListener(e -> {
            try {
                patient.setFirstName(firstNameField.getText());
                patient.setLastName(lastNameField.getText());
                patient.setDob(dobChooser.getDate().toInstant().atZone(ZoneId.systemDefault()).toLocalDate());
                patient.setEmail(emailField.getText());
                patient.setPhoneNumber(Long.parseLong(contactField.getText()));
                patient.setAddress(addressField.getText());
                patient.setPincode(pincodeField.getText());
                patient.setState((String) stateComboBox.getSelectedItem());
                patient.setSex((String) sexCombo.getSelectedItem());
                patient.setMaritalStatus((String) maritalStatusCombo.getSelectedItem());
                patient.setBloodGroup((String) bloodGroupCombo.getSelectedItem());

                // Update in JSON and refresh table
                JsonHandler jsonHandler = new JsonHandler();
                jsonHandler.updatePatient(patient);
                tableView.updateTable(jsonHandler.readPatients());

                JOptionPane.showMessageDialog(this, "Patient details updated successfully!");
                dispose();
            } catch (Exception ex) {
                JOptionPane.showMessageDialog(this, "Error: " + ex.getMessage());
            }
        });

        setVisible(true);
    }
}


import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;

public class WelcomePage {

    public static void main(String[] args) {
        SwingUtilities.invokeLater(() -> {
            JFrame frame = new JFrame("Hospital Information System");
            frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
            frame.setSize(800, 600);
            frame.setLocationRelativeTo(null); // Center the window

            // Create a panel for the welcome screen content
            JPanel panel = new JPanel();
            panel.setLayout(new BorderLayout());

            // Create and add a hospital-related image
            JLabel imageLabel = new JLabel(new ImageIcon("hospital_image.jpg")); // Use your hospital image here
            panel.add(imageLabel, BorderLayout.CENTER);

            // Create a menu bar
            JMenuBar menuBar = new JMenuBar();

            // Create the "Registration" menu
            JMenu registrationMenu = new JMenu("Registration");

            JMenuItem patientRegistration = new JMenuItem("Patient Registration");
            patientRegistration.addActionListener(new ActionListener() {
                @Override
                public void actionPerformed(ActionEvent e) {
                    JOptionPane.showMessageDialog(frame, "Patient Registration clicked.");
                    // Here you can add the actual registration functionality
                }
            });
            registrationMenu.add(patientRegistration);

            JMenuItem doctorRegistration = new JMenuItem("Doctor Registration");
            doctorRegistration.addActionListener(new ActionListener() {
                @Override
                public void actionPerformed(ActionEvent e) {
                    JOptionPane.showMessageDialog(frame, "Doctor Registration clicked.");
                    // Here you can add the actual registration functionality
                }
            });
            registrationMenu.add(doctorRegistration);

            // Create the "Appointments" menu
            JMenu appointmentsMenu = new JMenu("Appointments");

            JMenuItem createAppointment = new JMenuItem("Create Appointment");
            createAppointment.addActionListener(new ActionListener() {
                @Override
                public void actionPerformed(ActionEvent e) {
                    JOptionPane.showMessageDialog(frame, "Create Appointment clicked.");
                    // Add create appointment functionality here
                }
            });
            appointmentsMenu.add(createAppointment);

            JMenuItem rescheduleAppointment = new JMenuItem("Reschedule Appointment");
            rescheduleAppointment.addActionListener(new ActionListener() {
                @Override
                public void actionPerformed(ActionEvent e) {
                    JOptionPane.showMessageDialog(frame, "Reschedule Appointment clicked.");
                    // Add reschedule appointment functionality here
                }
            });
            appointmentsMenu.add(rescheduleAppointment);

            // Create the "Browser" menu
            JMenu browserMenu = new JMenu("Browser");

            JMenuItem searchPatient = new JMenuItem("Search Patient");
            searchPatient.addActionListener(new ActionListener() {
                @Override
                public void actionPerformed(ActionEvent e) {
                    JOptionPane.showMessageDialog(frame, "Search Patient clicked.");
                    // Add search patient functionality here
                }
            });
            browserMenu.add(searchPatient);

            JMenuItem searchDoctor = new JMenuItem("Search Doctor");
            searchDoctor.addActionListener(new ActionListener() {
                @Override
                public void actionPerformed(ActionEvent e) {
                    JOptionPane.showMessageDialog(frame, "Search Doctor clicked.");
                    // Add search doctor functionality here
                }
            });
            browserMenu.add(searchDoctor);

            // Add the menus to the menu bar
            menuBar.add(registrationMenu);
            menuBar.add(appointmentsMenu);
            menuBar.add(browserMenu);

            // Set the menu bar for the frame
            frame.setJMenuBar(menuBar);

            // Add the main panel to the frame
            frame.add(panel);

            // Make the frame visible
            frame.setVisible(true);
        });
    }
}
public class PatientRegistrationView {
    public JFrame frame;
    public JTextField firstNameField, lastNameField, addressLine1Field, addressLine2Field, addressLine3Field, 
            emailField, contactField, ageField, pincodeField, stateField;
    public JDateChooser dobChooser;
    public JComboBox<String> sexCombo, maritalStatusCombo, bloodGroupCombo,stateComboBox;
    public JButton registerButton, viewPatientsButton;

    public PatientRegistrationView() {
        frame = new JFrame("Hospital Information System - Patient Registration");
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.setSize(800, 700);
        frame.setLayout(new BorderLayout());

        JPanel mainPanel = new JPanel();
        mainPanel.setLayout(new GridBagLayout());
        GridBagConstraints gbc = new GridBagConstraints();
        mainPanel.setBorder(BorderFactory.createTitledBorder("Register a New Patient"));
       // mainPanel.setBackground(Color.decode("#E3F2FD"));
         JsonHandler.readPatients();

        
        firstNameField = new JTextField(15);
        lastNameField = new JTextField(15);
        dobChooser = new JDateChooser();
        dobChooser.setPreferredSize(new Dimension(170, dobChooser.getPreferredSize().height));
        ageField = new JTextField(15);
        ageField.setEditable(false);

        addressLine1Field = new JTextField(15);
        addressLine2Field = new JTextField(15);
        addressLine3Field = new JTextField(15);
        pincodeField = new JTextField(15);
        
       
        

        emailField = new JTextField(15);
        contactField = new JTextField(15);

        sexCombo = new JComboBox<>(new String[]{"Male", "Female", "Other"});
        sexCombo.setPreferredSize(new Dimension(170,30));
        maritalStatusCombo = new JComboBox<>(new String[]{"Single", "Married", "Divorced", "Widowed"});
        maritalStatusCombo.setPreferredSize(new Dimension(170,30));
        bloodGroupCombo = new JComboBox<>(new String[]{"A+", "A-", "B+", "B-", "AB+", "AB-", "O+", "O-"});
        bloodGroupCombo.setPreferredSize(new Dimension(170, 30));
        String[]states= {"Andhra Pradesh","Arunachal Pradesh","Assam","Bihar","Chhattisgarh","Goa","Gujarat","Haryana","Himachal Pradesh","Jharkhand","Karnataka","Kerala","Madhya Pradesh","Maharashtra","Manipur","Meghalaya","Mizoram","Nagaland","Odisha","Punjab","Rajasthan","Sikkim","Tamil Nadu","Telangana","Tripura","Uttar Pradesh","Uttarakhand","West Bengal"};
        stateComboBox=new JComboBox<>(states);
        stateComboBox.setPreferredSize(new Dimension(170,30));
        
        

        registerButton = new JButton("Register");
        viewPatientsButton = new JButton("View Patients");
        
        //registerButton.setBackground(Color.decode("#FFFFFF"));
       // frame.getContentPane().setBackground(Color.decode("#F0F7F4"));
       // registerButton.setForeground(Color.decode("#1A237E"));
        //viewPatientsButton.setForeground(Color.decode("#424242"));

        
        gbc.insets = new Insets(5, 5, 5, 5); 
        gbc.anchor = GridBagConstraints.WEST;

        // First Name
        gbc.gridx = 0;
        gbc.gridy = 0;
        mainPanel.add(new JLabel("First Name:"), gbc);
        gbc.gridx = 1;
        mainPanel.add(firstNameField, gbc);

        // Last Name
        gbc.gridx = 0;
        gbc.gridy = 1;
        mainPanel.add(new JLabel("Last Name:"), gbc);
        gbc.gridx = 1;
        mainPanel.add(lastNameField, gbc);

        // Date of Birth
        gbc.gridx = 0;
        gbc.gridy = 2;
        mainPanel.add(new JLabel("Date of Birth:"), gbc);
        gbc.gridx = 1;
        mainPanel.add(dobChooser, gbc);

        // Age
        gbc.gridx = 0;
        gbc.gridy = 3;
        mainPanel.add(new JLabel("Age:"), gbc);
        gbc.gridx = 1;
        mainPanel.add(ageField, gbc);

        // Sex
        gbc.gridx = 0;
        gbc.gridy = 4;
        mainPanel.add(new JLabel("Sex:"), gbc);
        gbc.gridx = 1;
        mainPanel.add(sexCombo, gbc);

        // Marital Status
        gbc.gridx = 0;
        gbc.gridy = 5;
        mainPanel.add(new JLabel("Marital Status:"), gbc);
        gbc.gridx = 1;
        mainPanel.add(maritalStatusCombo, gbc);

        //bloodgroup
        gbc.gridx = 0;
        gbc.gridy = 6;
        mainPanel.add(new JLabel("Blood Group:"), gbc);
        gbc.gridx = 1;
        mainPanel.add(bloodGroupCombo, gbc);
        
        

        //email
        gbc.gridx = 0;
        gbc.gridy = 7;
        mainPanel.add(new JLabel("Email:"), gbc);
        gbc.gridx = 1;
        mainPanel.add(emailField, gbc);

        //Contact  num
        gbc.gridx = 0;
        gbc.gridy = 8;
        mainPanel.add(new JLabel("Contact number:"), gbc);
        gbc.gridx = 1;
        mainPanel.add(contactField, gbc);

        // address line 1
        gbc.gridx = 0;
        gbc.gridy = 9;
        mainPanel.add(new JLabel("AddressLine 1:"), gbc);
        gbc.gridx = 1;
        mainPanel.add(addressLine1Field, gbc);

        // addressline2
        gbc.gridx = 0;
        gbc.gridy = 10;
        mainPanel.add(new JLabel("AddressLine 2"), gbc);
        gbc.gridx = 1;
        mainPanel.add(addressLine2Field, gbc);

        // addressline3 ;
        gbc.gridx=0;
        gbc.gridy = 11;
        mainPanel.add(new JLabel("AddressLine 3"), gbc);
        gbc.gridx = 1;
        mainPanel.add(addressLine3Field, gbc);

        // pincode
        gbc.gridx = 0;
        gbc.gridy = 12;
        mainPanel.add(new JLabel("PinCode:"), gbc);
        gbc.gridx = 1;
        mainPanel.add(pincodeField, gbc);

        // state
        gbc.gridx = 0;
        gbc.gridy = 13;
        mainPanel.add(new JLabel("State:"), gbc);
        gbc.gridx = 1;
        mainPanel.add(stateComboBox, gbc);

        // Blood Group
//        gbc.gridx = 0;
//        gbc.gridy = 14;
//        mainPanel.add(new JLabel("Blood Group:"), gbc);
//        gbc.gridx = 1;
//        mainPanel.add(bloodGroupCombo, gbc);
//
        
        JPanel bottomPanel = new JPanel(new FlowLayout());
        bottomPanel.add(registerButton);
        bottomPanel.add(viewPatientsButton);

        
        frame.add(mainPanel, BorderLayout.CENTER);
        frame.add(bottomPanel, BorderLayout.SOUTH);

        
        dobChooser.addPropertyChangeListener(e -> {
            if ("date".equals(e.getPropertyName())) {
                LocalDate dob = dobChooser.getDate().toInstant().atZone(ZoneId.systemDefault()).toLocalDate();
                int age = Period.between(dob, LocalDate.now()).getYears();
                ageField.setText(String.valueOf(age));
            }
        });

        frame.setVisible(true);
    }
    public void resetFields() {
        firstNameField.setText(""); 
        lastNameField.setText("");  
        dobChooser.setDate(new Date());   
        ageField.setText("");       
        sexCombo.setSelectedIndex(0); 
        maritalStatusCombo.setSelectedIndex(0);
        addressLine1Field.setText("");
        addressLine2Field.setText(""); 
        addressLine3Field.setText(""); 
        pincodeField.setText("");      
        stateComboBox.setSelectedIndex(0);            
        emailField.setText("");        
        bloodGroupCombo.setSelectedIndex(0); 
        contactField.setText("");      
    }
}
import javax.swing.*;
import javax.swing.border.TitledBorder;
import com.toedter.calendar.JDateChooser;
import java.awt.*;
import java.time.LocalDate;
import java.time.Period;
import java.time.ZoneId;
import java.util.Date;

public class PatientRegistrationView {
    public JFrame frame;
    public JTextField firstNameField, lastNameField, addressLine1Field, addressLine2Field, addressLine3Field, 
            emailField, contactField, ageField, pincodeField, emergencyNameField, emergencyPhoneField;
    public JDateChooser dobChooser;
    public JComboBox<String> sexCombo, maritalStatusCombo, bloodGroupCombo, stateComboBox;
    public JButton registerButton, viewPatientsButton;

    public PatientRegistrationView() {
        // Main Frame
        frame = new JFrame("Hospital Information System - Patient Registration");
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.setSize(850, 750);
        frame.setLayout(new BorderLayout());
        
        // Main Panel
        JPanel mainPanel = new JPanel();
        mainPanel.setLayout(new BoxLayout(mainPanel, BoxLayout.Y_AXIS));
        mainPanel.setBackground(Color.decode("#E3F2FD"));
        
        // Personal Information Section
        JPanel personalInfoPanel = createSectionPanel("Personal Information");
        GridBagConstraints gbc = new GridBagConstraints();
        personalInfoPanel.setLayout(new GridBagLayout());
        gbc.insets = new Insets(5, 5, 5, 5);
        gbc.anchor = GridBagConstraints.WEST;

        // Personal Information Fields
        firstNameField = new JTextField(15);
        lastNameField = new JTextField(15);
        dobChooser = new JDateChooser();
        dobChooser.setPreferredSize(new Dimension(170, dobChooser.getPreferredSize().height));
        ageField = new JTextField(15);
        ageField.setEditable(false);
        sexCombo = new JComboBox<>(new String[]{"Male", "Female", "Other"});
        maritalStatusCombo = new JComboBox<>(new String[]{"Single", "Married", "Divorced", "Widowed"});
        bloodGroupCombo = new JComboBox<>(new String[]{"A+", "A-", "B+", "B-", "AB+", "AB-", "O+", "O-"});
        
        // Add Personal Info Fields
        addFieldToPanel(personalInfoPanel, gbc, "First Name:", firstNameField, 0);
        addFieldToPanel(personalInfoPanel, gbc, "Last Name:", lastNameField, 1);
        addFieldToPanel(personalInfoPanel, gbc, "Date of Birth:", dobChooser, 2);
        addFieldToPanel(personalInfoPanel, gbc, "Age:", ageField, 3);
        addFieldToPanel(personalInfoPanel, gbc, "Sex:", sexCombo, 4);
        addFieldToPanel(personalInfoPanel, gbc, "Marital Status:", maritalStatusCombo, 5);
        addFieldToPanel(personalInfoPanel, gbc, "Blood Group:", bloodGroupCombo, 6);

        // Contact Information Section
        JPanel contactInfoPanel = createSectionPanel("Contact Information");
        contactInfoPanel.setLayout(new GridBagLayout());
        emailField = new JTextField(15);
        contactField = new JTextField(15);
        addressLine1Field = new JTextField(15);
        addressLine2Field = new JTextField(15);
        addressLine3Field = new JTextField(15);
        pincodeField = new JTextField(15);
        String[] states = {"Andhra Pradesh", "Arunachal Pradesh", "Assam", "Bihar", "Chhattisgarh", "Goa", "Gujarat", "Haryana", "Himachal Pradesh",
                "Jharkhand", "Karnataka", "Kerala", "Madhya Pradesh", "Maharashtra", "Manipur", "Meghalaya", "Mizoram", "Nagaland", 
                "Odisha", "Punjab", "Rajasthan", "Sikkim", "Tamil Nadu", "Telangana", "Tripura", "Uttar Pradesh", "Uttarakhand", "West Bengal"};
        stateComboBox = new JComboBox<>(states);

        // Add Contact Info Fields
        addFieldToPanel(contactInfoPanel, gbc, "Email:", emailField, 0);
        addFieldToPanel(contactInfoPanel, gbc, "Contact Number:", contactField, 1);
        addFieldToPanel(contactInfoPanel, gbc, "Address Line 1:", addressLine1Field, 2);
        addFieldToPanel(contactInfoPanel, gbc, "Address Line 2:", addressLine2Field, 3);
        addFieldToPanel(contactInfoPanel, gbc, "Address Line 3:", addressLine3Field, 4);
        addFieldToPanel(contactInfoPanel, gbc, "Pin Code:", pincodeField, 5);
        addFieldToPanel(contactInfoPanel, gbc, "State:", stateComboBox, 6);

        // Emergency Contact Section
        JPanel emergencyContactPanel = createSectionPanel("Emergency Contact Information");
        emergencyContactPanel.setLayout(new GridBagLayout());
        emergencyNameField = new JTextField(15);
        emergencyPhoneField = new JTextField(15);

        // Add Emergency Contact Fields
        addFieldToPanel(emergencyContactPanel, gbc, "Emergency Contact Name:", emergencyNameField, 0);
        addFieldToPanel(emergencyContactPanel, gbc, "Emergency Contact Phone:", emergencyPhoneField, 1);

        // Bottom Buttons
        JPanel bottomPanel = new JPanel(new FlowLayout());
        bottomPanel.setBackground(Color.decode("#BBDEFB"));
        registerButton = new JButton("Register");
        viewPatientsButton = new JButton("View Patients");
        bottomPanel.add(registerButton);
        bottomPanel.add(viewPatientsButton);

        // Add Sections to Main Panel
        mainPanel.add(personalInfoPanel);
        mainPanel.add(contactInfoPanel);
        mainPanel.add(emergencyContactPanel);
        frame.add(mainPanel, BorderLayout.CENTER);
        frame.add(bottomPanel, BorderLayout.SOUTH);

        // Auto-Calculate Age
        dobChooser.addPropertyChangeListener(e -> {
            if ("date".equals(e.getPropertyName())) {
                LocalDate dob = dobChooser.getDate().toInstant().atZone(ZoneId.systemDefault()).toLocalDate();
                int age = Period.between(dob, LocalDate.now()).getYears();
                ageField.setText(String.valueOf(age));
            }
        });

        frame.setVisible(true);
    }

    // Helper Method to Create Section Panel
    private JPanel createSectionPanel(String title) {
        JPanel panel = new JPanel();
        panel.setBorder(BorderFactory.createTitledBorder(BorderFactory.createLineBorder(Color.decode("#64B5F6")),
                title, TitledBorder.LEFT, TitledBorder.TOP, new Font("Arial", Font.BOLD, 14), Color.decode("#1565C0")));
        panel.setBackground(Color.WHITE);
        return panel;
    }

    // Helper Method to Add Field to Panel
    private void addFieldToPanel(JPanel panel, GridBagConstraints gbc, String label, JComponent field, int row) {
        gbc.gridx = 0;
        gbc.gridy = row;
        panel.add(new JLabel(label), gbc);
        gbc.gridx = 1;
        panel.add(field, gbc);
    }

    public void resetFields() {
        firstNameField.setText("");
        lastNameField.setText("");
        dobChooser.setDate(new Date());
        ageField.setText("");
        sexCombo.setSelectedIndex(0);
        maritalStatusCombo.setSelectedIndex(0);
        bloodGroupCombo.setSelectedIndex(0);
        emailField.setText("");
        contactField.setText("");
        addressLine1Field.setText("");
        addressLine2Field.setText("");
        addressLine3Field.setText("");
        pincodeField.setText("");
        stateComboBox.setSelectedIndex(0);
        emergencyNameField.setText("");
        emergencyPhoneField.setText("");
    }
}


public class Patient {
	private static int tokenCounter;
    private int mrdID;
    private String firstName;
    private String lastName;
    private LocalDate dob;
    private int ageYears;
    private int ageMonths;
    private String sex;
    private String maritalStatus;
    private String bloodGroup;
    private String email;
    private long phoneNumber;
    private String address;
    private String pincode;
    private String state;
    public Patient() {
    	super();
    	// TODO Auto-generated constructor stub
    }
    public Patient( String firstName, String lastName, LocalDate dob, int ageYears,int ageMonths,String sex, String maritalStatus,
                   String bloodGroup, String email, long phoneNumber, String address, String pincode, String state) {
        this.mrdID = ++tokenCounter;
        this.firstName = firstName;
        this.lastName = lastName;
        this.dob = dob;
        this.ageYears=ageYears;
        this.ageMonths=ageMonths;
        this.sex = sex;
        this.maritalStatus = maritalStatus;
        this.bloodGroup = bloodGroup;
        this.email = email;
        this.phoneNumber = phoneNumber;
        this.address = address;
        this.pincode = pincode;
        this.state = state;
    }
    // Getters and setters
    public int getMrdID() {
        return mrdID;
    }
    public void setMrdID(int mrdID) {
        this.mrdID = mrdID;
    }
    public String getFirstName() {
        return firstName;
    }
    public void setFirstName(String firstName) {
        this.firstName = firstName;
    }
    public String getLastName() {
        return lastName;
    }
    public void setLastName(String lastName) {
        this.lastName = lastName;
    }
    public LocalDate getDob() {
        return dob;
    }
    public void setDob(LocalDate dob) {
        this.dob = dob;
    }
    
    public int getAgeYears() {
		return ageYears;
	}
	public void setAgeYears(int ageYears) {
		this.ageYears = ageYears;
	}
	public int getAgeMonths() {
		return ageMonths;
	}
	public void setAgeMonths(int ageMonths) {
		this.ageMonths = ageMonths;
	}
	public String getSex() {
        return sex;
    }
    public void setSex(String sex) {
        this.sex = sex;
    }
    public String getMaritalStatus() {
        return maritalStatus;
    }
    public void setMaritalStatus(String maritalStatus) {
        this.maritalStatus = maritalStatus;
    }
    public String getBloodGroup() {
        return bloodGroup;
    }
    public void setBloodGroup(String bloodGroup) {
        this.bloodGroup = bloodGroup;
    }
    public String getEmail() {
        return email;
    }
    public void setEmail(String email) {
        this.email = email;
    }
    public long getPhoneNumber() {
        return phoneNumber;
    }
    public void setPhoneNumber(long phoneNumber) {
        this.phoneNumber = phoneNumber;
    }
    public String getAddress() {
        return address;
    }
    public void setAddress(String address) {
        this.address = address;
    }
    public String getPincode() {
        return pincode;
    }
    public void setPincode(String pincode) {
        this.pincode = pincode;
    }

    public String getState() {
        return state;
    }
    public void setState(String state) {
        this.state = state;
    }
	public static int getTokenCounter() {
		return tokenCounter;
	}
	public static void setTokenCounter(int tokenCounter) {
		Patient.tokenCounter = tokenCounter;
	}
	
    
}
public class PatientUpdateView extends JFrame {
    private JTextField firstNameField, lastNameField,ageField, emailField, contactField, addressField, pincodeField;
    private JComboBox<String> sexCombo, maritalStatusCombo, bloodGroupCombo, stateComboBox;
    private JDateChooser dobChooser;
    private JButton updateButton;
    private Patient patient;
    private PatientTableView tableView;

    public PatientUpdateView(Patient patient, PatientTableView tableView) {
        this.patient = patient;
        this.tableView = tableView;

        setTitle("Update Patient Details");
        setSize(800, 700);
        setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        setLayout(new GridBagLayout());

        GridBagConstraints gbc = new GridBagConstraints();
        gbc.insets = new Insets(5, 5, 5, 5);
        gbc.anchor = GridBagConstraints.WEST;

        // Initialize components
        firstNameField = new JTextField(patient.getFirstName(), 15);
        lastNameField = new JTextField(patient.getLastName(), 15);
        dobChooser = new JDateChooser();
        dobChooser.setDate(Date.from(patient.getDob().atStartOfDay(ZoneId.systemDefault()).toInstant()));
        dobChooser.setPreferredSize(new Dimension(170, dobChooser.getPreferredSize().height));
        ageField=new JTextField(15);
        emailField = new JTextField(patient.getEmail(), 15);
        contactField = new JTextField(String.valueOf(patient.getPhoneNumber()), 15);
        addressField = new JTextField(patient.getAddress(), 15);
        pincodeField = new JTextField(patient.getPincode(), 15);

        sexCombo = new JComboBox<>(new String[]{"Male", "Female", "Other"});
        sexCombo.setPreferredSize(new Dimension(170,30));

        sexCombo.setSelectedItem(patient.getSex());

        maritalStatusCombo = new JComboBox<>(new String[]{"Single", "Married", "Divorced", "Widowed"});
        maritalStatusCombo.setPreferredSize(new Dimension(170,30));

        maritalStatusCombo.setSelectedItem(patient.getMaritalStatus());

        bloodGroupCombo = new JComboBox<>(new String[]{"A+", "A-", "B+", "B-", "AB+", "AB-", "O+", "O-"});
        bloodGroupCombo.setPreferredSize(new Dimension(170,30));

        bloodGroupCombo.setSelectedItem(patient.getBloodGroup());

        stateComboBox = new JComboBox<>(new String[]{"Andhra Pradesh", "Arunachal Pradesh", "Assam","Bihar","Chhattisgarh","Goa","Gujarat","Haryana","Himachal Pradesh","Jharkhand","Karnataka","Kerala","Madhya Pradesh","Maharashtra","Manipur","Meghalaya","Mizoram","Nagaland","Odisha","Punjab","Rajasthan","Sikkim","Tamil Nadu","Telangana","Tripura","Uttar Pradesh","Uttarakhand","West Bengal"});
        stateComboBox.setPreferredSize(new Dimension(170,30));

        stateComboBox.setSelectedItem(patient.getState());
         
        updateButton = new JButton("Update");

        // Layout
        gbc.gridx = 0;
        gbc.gridy = 0;
        add(new JLabel("First Name:"), gbc);
        gbc.gridx = 1;
        add(firstNameField, gbc);

        gbc.gridx = 0;
        gbc.gridy = 1;
        add(new JLabel("Last Name:"), gbc);
        gbc.gridx = 1;
        add(lastNameField, gbc);

        gbc.gridx = 0;
        gbc.gridy = 2;
        add(new JLabel("DOB:"), gbc);
        gbc.gridx = 1;
        add(dobChooser, gbc);
        
        gbc.gridx = 0;
        gbc.gridy = 3;
        add(new JLabel("Age:"), gbc);
        gbc.gridx = 1;
        add(ageField, gbc);

        gbc.gridx = 0;
        gbc.gridy = 4;
        add(new JLabel("Sex:"), gbc);
        gbc.gridx = 1;
        add(sexCombo, gbc);

        gbc.gridx = 0;
        gbc.gridy = 5;
        add(new JLabel("MaritalStatus:"), gbc);
        gbc.gridx = 1;
        add(maritalStatusCombo, gbc);

        gbc.gridx = 0;
        gbc.gridy = 6;
        add(new JLabel("BloodGroup:"), gbc);
        gbc.gridx = 1;
        add(bloodGroupCombo, gbc);

        gbc.gridx = 0;
        gbc.gridy = 7;
        add(new JLabel("Email:"), gbc);
        gbc.gridx = 1;
        add(emailField, gbc);

        gbc.gridx = 0;
        gbc.gridy = 8;
        add(new JLabel("ContactNumber:"), gbc);
        gbc.gridx = 1;
        add(contactField, gbc);

        gbc.gridx = 0;
        gbc.gridy = 9;
        add(new JLabel("Address"), gbc);
        gbc.gridx = 1;
        add(addressField, gbc);

        gbc.gridx = 0;
        gbc.gridy = 10;
        add(new JLabel("Pincode:"), gbc);
        gbc.gridx = 1;
        add(pincodeField, gbc);

        gbc.gridx = 0;
        gbc.gridy = 11;
        add(new JLabel("State:"), gbc);
        gbc.gridx = 1;
        add(stateComboBox, gbc);

        gbc.gridx = 1;
        gbc.gridy = 12;
        add(updateButton, gbc);
        
        dobChooser.addPropertyChangeListener(ex -> {
            if ("date".equals(ex.getPropertyName())) {
                LocalDate dob = dobChooser.getDate().toInstant().atZone(ZoneId.systemDefault()).toLocalDate();
                int age = Period.between(dob, LocalDate.now()).getYears();
                ageField.setText(String.valueOf(age));
            }
        });

        // Update Button Action
        updateButton.addActionListener(e -> {
            try {
                patient.setFirstName(firstNameField.getText());
                patient.setLastName(lastNameField.getText());
                patient.setDob(dobChooser.getDate().toInstant().atZone(ZoneId.systemDefault()).toLocalDate());
                patient.setSex((String) sexCombo.getSelectedItem());
                patient.setMaritalStatus((String) maritalStatusCombo.getSelectedItem());
                patient.setBloodGroup((String) bloodGroupCombo.getSelectedItem());
                patient.setEmail(emailField.getText());
                patient.setPhoneNumber(Long.parseLong(contactField.getText()));
                patient.setAddress(addressField.getText());
                patient.setPincode(pincodeField.getText());
                patient.setState((String) stateComboBox.getSelectedItem());
                
               

                // Update in JSON and refresh table
                JsonHandler jsonHandler = new JsonHandler();
                jsonHandler.updatePatient(patient);
                tableView.updateTable(jsonHandler.readPatients());

                JOptionPane.showMessageDialog(this, "Patient details updated successfully!");
                dispose();
            } catch (Exception ex) {
                JOptionPane.showMessageDialog(this, "Error: " + ex.getMessage());
            }
        });

        setVisible(true);
    }
}

public class PatientRegistrationController {
    private PatientRegistrationView view;
    private JsonHandler jsonHandler;

    public PatientRegistrationController(PatientRegistrationView view) {
        this.view = view;
        this.jsonHandler = new JsonHandler();

        view.registerButton.addActionListener(e -> registerPatient());
        view.viewPatientsButton.addActionListener(e -> viewPatients());
    }

    private void registerPatient() {
        try {
           
            String firstName = view.firstNameField.getText();
            String lastName = view.lastNameField.getText();
            Date dobDate = view.dobChooser.getDate();
            String sex = (String) view.sexCombo.getSelectedItem();
            String maritalStatus = (String) view.maritalStatusCombo.getSelectedItem();
            String addressLine1 = view.addressLine1Field.getText();
            String addressLine2 = view.addressLine2Field.getText();
            String addressLine3 = view.addressLine3Field.getText();
            String pincode = view.pincodeField.getText();
            String state = (String) view.stateComboBox.getSelectedItem();
            String fullAddress = String.join(", ", addressLine1, addressLine2, addressLine3,pincode,state).trim();
            String email = view.emailField.getText();
            String bloodGroup = (String) view.bloodGroupCombo.getSelectedItem();
            String contactText = view.contactField.getText().trim();

            
            if (firstName.isEmpty() || lastName.isEmpty() || dobDate == null || fullAddress.isEmpty()
                    || pincode.isEmpty() || state.isEmpty() ||  email.isEmpty()
                    || contactText.isEmpty()) {
                JOptionPane.showMessageDialog(view.frame, "All fields are mandatory!");
                return;
            }
            if(!firstName.matches("^[A-Za-z]+$")||!lastName.matches("^[A-Za-z]+$")) {
            	JOptionPane.showMessageDialog(view.frame, "Name fields must contain letters only");
            	return;
            }
            LocalDate dobval=dobDate.toInstant().atZone(ZoneId.systemDefault()).toLocalDate();
            if(dobval.isAfter(LocalDate.now())) {
            	JOptionPane.showMessageDialog(view.frame, "Date  of birth cannot be in future");
            	return;
            }

            if (!email.matches("^[A-Za-z0-9+_.-]+@[A-Za-z0-9.-]+$")) {
                JOptionPane.showMessageDialog(view.frame, "Please enter a valid email!");
                return;
            }

            if (!contactText.matches("^[6-9][0-9]{9}$")) {
                JOptionPane.showMessageDialog(view.frame, "Invalid phone number format!");
                return;
            }
            if(!pincode.matches("\\d{6}")) {
            	JOptionPane.showMessageDialog(view.frame, "Invalid pincode");
            	return;
            }

            
            long contactNumber = Long.parseLong(contactText);
            LocalDate dob = dobDate.toInstant().atZone(ZoneId.systemDefault()).toLocalDate();
            LocalDate currentDate=LocalDate.now();
            Period agePeriod=Period.between(dob, currentDate);
            int years=agePeriod.getYears();
            int months=agePeriod.getMonths();
            String ageText=years+"Years, "+months+" Months";
            view.ageField.setText(ageText);
            
            Patient patient = new Patient(firstName, lastName, dob, years,months, sex, maritalStatus, bloodGroup,email,contactNumber,fullAddress, pincode, 
                                          state);

            // Save to JSON File
            List<Patient> patients = jsonHandler.readPatients();
            patients.add(patient);
            jsonHandler.savePatients(patients);

            JOptionPane.showMessageDialog(view.frame, "Patient registered successfully!");
//            view.resetFields();
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(view.frame, "Error: " + ex.getMessage());
        }
        view.resetFields();
    }

    private void viewPatients() {
    	List<Patient>patients=jsonHandler.readPatients();
        new PatientTableView(patients);
    }
}
